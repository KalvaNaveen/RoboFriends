{"version":3,"sources":["serviceWorker.js","Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Container/App.js","actions.js","Constants.js","reducer.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","_ref","UserID","UserName","UserMailId","react_default","a","createElement","className","src","concat","alt","CardList","usersData","map","user","i","Components_Card","key","toString","id","name","email","SearchBox","SearchChange","type","placeholder","onChange","Scroll","prop","style","overflowY","border","height","children","App","this","props","onUsersRequest","_this$props","searchField","onSearchChange","users","isPending","FilteredUser","filter","cu","toLowerCase","includes","Components_SearchBox","Components_Scroll","Components_CardList","Component","connect","state","searchUsers","requestUsers","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateUsers","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","Object","assign","Store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","store","src_Container_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9f83d8e3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nconst Card =({UserID,UserName,UserMailId})=>{\r\n      return(\r\n            <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow5'>\r\n                <picture>\r\n                     <img src={`https://robohash.org/${UserID}?150*150`} alt={UserName}/>\r\n                </picture>\r\n                <div>\r\n                    <h2>{UserName}</h2>\r\n                    <p>{UserMailId}</p>\r\n                </div>\r\n            </div>\r\n    );\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from '../Components/Card';\r\n\r\nconst CardList =({usersData})=>{\r\n    return (\r\n       <div>\r\n           {\r\n               usersData.map((user,i)=>{\r\n                return( \r\n                <Card key={i.toString()} UserID={user.id} UserName={user.name} UserMailId={user.email} />);\r\n              })\r\n            }\r\n            </div>\r\n    ) ;\r\n \r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox=({SearchChange})=>{\r\n\r\n    return(\r\n        <div className='pa2'>\r\n            <input\r\n             className='pa3 ba b--green bg-lightest-blue'\r\n             type='search' \r\n             placeholder='Search Robo'\r\n             onChange={SearchChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll =(prop)=>{\r\n    return(\r\n        <div style={{overflowY:'auto',border:'1px solid lightest-green',height:'78vh'}}>\r\n            {prop.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React,{Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport CardList from '../Components/CardList';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport Scroll from '../Components/Scroll';\r\nimport './App.css';\r\nimport {setSearchField,requestUsersAction} from '../actions';\r\n\r\nconst mapStateToProps= (state)=>{\r\n        return{\r\n        searchField:state.searchUsers.searchField,\r\n        users:state.requestUsers.users,\r\n        isPending:state.requestUsers.isPending,\r\n        error:state.requestUsers.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps= (dispatch) =>{\r\n    return {\r\n        onSearchChange: (event)=>dispatch(setSearchField(event.target.value)),\r\n        onUsersRequest:()=>dispatch(requestUsersAction())\r\n    }\r\n}\r\nclass App extends Component{\r\n    componentDidMount(){\r\n      this.props.onUsersRequest();\r\n    }\r\n\r\n    render(){\r\n        const {searchField,onSearchChange,users,isPending} = this.props;\r\n        const FilteredUser= users.filter((cu)=>{\r\n            return  cu.name.toLowerCase().includes(searchField);\r\n        })\r\n            return  isPending? <h1 className='f1  tc'>loading............</h1> :( \r\n                                                                                        <div className='tc'>\r\n                                                                                            <h1 className='f1'>RoboFriends</h1>\r\n                                                                                            <SearchBox SearchChange={onSearchChange}/>\r\n                                                                                            <Scroll>\r\n                                                                                            <CardList usersData={FilteredUser}/>\r\n                                                                                            </Scroll>\r\n                                                                                        </div>\r\n                                                                                    )\r\n        }\r\n    \r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\r\n","import * as constants from './Constants';\r\n\r\nexport const setSearchField=(text)=>({\r\n    type:constants.CHANGE_SEARCH_FIELD,\r\n    payload:text\r\n})\r\n\r\n\r\nexport const requestUsersAction=()=>(dispatch)=>{\r\n    dispatch({type:constants.REQUEST_USERS_PENDING,isPending:true});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=> {return response.json()})\r\n        .then(data => dispatch({type:constants.REQUEST_USERS_SUCCESS,payload:data,isPending:false}))\r\n        .catch(error => dispatch({type:constants.REQUEST_USERS_FAILED,payload:error,isPending:false}))\r\n\r\n}","export const CHANGE_SEARCH_FIELD='CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_USERS_PENDING='REQUEST_USERS_PENDING';\r\nexport const REQUEST_USERS_SUCCESS='REQUEST_USERS_SUCCESS';\r\nexport const REQUEST_USERS_FAILED='REQUEST_USERS_FAILED';","import * as constants from './Constants';\r\n\r\nconst initialStateSearch={\r\n    searchField:''\r\n}\r\n\r\nexport const searchUsers=(state=initialStateSearch,action={})=>{\r\n    switch(action.type){\r\n        case constants.CHANGE_SEARCH_FIELD:\r\n            return Object.assign({},state,{searchField:action.payload});\r\n        default:\r\n         return state;\r\n    }\r\n}\r\n\r\nconst initialStateUsers={\r\n    isPending:false,\r\n    users:[],\r\n    error:''\r\n}\r\nexport const requestUsers=(state=initialStateUsers,action={})=>{\r\n    switch(action.type){\r\n        case constants.REQUEST_USERS_PENDING:\r\n            return Object.assign({},state,{isPending:true});\r\n        case constants.REQUEST_USERS_SUCCESS:\r\n            return Object.assign({},state,{isPending:false,users:action.payload});\r\n        case constants.REQUEST_USERS_FAILED:\r\n            return Object.assign({},state,{isPending:false,error:action.payload});\r\n        default:\r\n         return state;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux';\r\nimport {createStore,applyMiddleware,combineReducers} from 'redux';\r\nimport {createLogger} from 'redux-logger'\r\nimport thunkMiddleware  from 'redux-thunk';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport App from './Container/App';\r\nimport {searchUsers,requestUsers} from './reducer';\r\n\r\nconst logger = createLogger();\r\nconst rootReducer=combineReducers({searchUsers,requestUsers});\r\nconst Store = createStore(rootReducer,applyMiddleware(thunkMiddleware,logger));\r\nReactDOM.render(\r\n<Provider store={Store}>\r\n<App/>\r\n</Provider>, \r\ndocument.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}